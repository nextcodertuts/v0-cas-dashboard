// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  OFFICE_AGENT
  HOSPITAL_USER
}

enum CardStatus {
  ACTIVE
  SUSPENDED
  EXPIRED
  CANCELLED
}

enum MemberRelation {
  HEAD
  SPOUSE
  FATHER
  MOTHER
  SON
  DAUGHTER
  OTHER
}

enum DonationType {
  MONETARY
  MEDICAL_SUPPLIES
  EQUIPMENT
  OTHER
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  UPI
  CHEQUE
  CREDIT_CARD
  DEBIT_CARD
}

enum DonorType {
  INDIVIDUAL
  ORGANIZATION
}

enum BenefitType {
  MEDICAL_CHECKUP
  HOSPITALIZATION
  SURGERY
  MEDICATION
  CONSULTATION
  OTHER
}

enum BenefitStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String
  phone         String?
  passwordHash  String
  role          UserRole
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdCards  Card[]        @relation("CreatedBy")
  updatedCards  Card[]        @relation("UpdatedBy")
  auditLogs     AuditLog[]
  hospital      Hospital?     @relation("HospitalUser")
  households    Household[]   @relation("CreatedBy")
  beneficiaries Beneficiary[] @relation("CreatedBy")
  teamLeader    User?         @relation("TeamMembers", fields: [teamLeaderId], references: [id])
  teamLeaderId  String?
  teamMembers   User[]        @relation("TeamMembers")

  @@index([teamLeaderId])
}

model Hospital {
  id        String   @id @default(cuid())
  name      String
  address   String
  phone     String
  licenseNo String   @unique
  user      User     @relation("HospitalUser", fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donation {
  id               String        @id @default(cuid())
  donorName        String
  donorEmail       String?
  donorPhone       String?
  donorAddress     String?
  donorType        DonorType
  donorPAN         String? // PAN card number for tax purposes
  organizationName String? // For organizational donors
  type             DonationType
  amount           Decimal       @db.Decimal(10, 2)
  description      String?
  paymentMethod    PaymentMethod
  paymentReference String? // Cheque number, transaction ID, etc.
  paymentDate      DateTime      @default(now())
  receiptNumber    String        @unique // For generating donation receipts/certificates
  isAnonymous      Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  createdById      String // Admin who recorded the donation
  notes            String? // Internal notes about the donation

  @@index([donorName])
  @@index([donorPAN])
  @@index([paymentDate])
  @@index([receiptNumber])
}

model Plan {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String
  price        Decimal  @db.Decimal(10, 2)
  durationDays Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  cards        Card[]
}

model Household {
  id            String        @id @default(cuid())
  headName      String
  address       String
  phone         String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  members       Member[]
  card          Card?
  createdBy     User          @relation("CreatedBy", fields: [createdById], references: [id])
  createdById   String
  beneficiaries Beneficiary[]

  @@index([createdById])
}

model Member {
  id            String         @id @default(cuid())
  householdId   String
  firstName     String
  lastName      String
  dob           DateTime
  aadhaarNo     String         @unique
  relation      MemberRelation
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  household     Household      @relation(fields: [householdId], references: [id], onDelete: Cascade)
  beneficiaries Beneficiary[]  @relation("BeneficiaryMembers")

  @@index([householdId])
}

model Card {
  id            String        @id @default(cuid())
  cardNumber    String        @unique // 16-digit unique card number
  householdId   String        @unique
  planId        String
  status        CardStatus
  issueDate     DateTime
  expiryDate    DateTime
  createdById   String
  updatedById   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  household     Household     @relation(fields: [householdId], references: [id], onDelete: Cascade)
  plan          Plan          @relation(fields: [planId], references: [id])
  createdBy     User          @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy     User          @relation("UpdatedBy", fields: [updatedById], references: [id])
  auditLogs     AuditLog[]
  beneficiaries Beneficiary[]

  @@index([cardNumber])
  @@index([planId])
  @@index([createdById])
  @@index([updatedById])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  cardId    String?
  action    String
  timestamp DateTime @default(now())
  metadata  Json?
  user      User     @relation(fields: [userId], references: [id])
  card      Card?    @relation(fields: [cardId], references: [id])

  @@index([userId])
  @@index([cardId])
}

model Beneficiary {
  id          String        @id @default(cuid())
  householdId String
  cardId      String
  benefitType BenefitType
  status      BenefitStatus @default(PENDING)
  amount      Decimal       @db.Decimal(10, 2)
  description String
  startDate   DateTime
  endDate     DateTime?
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  household   Household     @relation(fields: [householdId], references: [id])
  card        Card          @relation(fields: [cardId], references: [id])
  createdBy   User          @relation("CreatedBy", fields: [createdById], references: [id])
  members     Member[]      @relation("BeneficiaryMembers")

  @@index([householdId])
  @@index([cardId])
  @@index([createdById])
}
